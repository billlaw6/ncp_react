/* eslint-disable @typescript-eslint/camelcase */
import React, { ReactElement, Component } from "react";
import { connect } from "react-redux";
import { Row, Col, Dropdown, Menu, Icon, Pagination, Table, Checkbox, Modal } from "antd";
import { StoreStateI, TempReportI } from "_constants/interface";

import {
  MapStateToPropsI,
  HomePropsI,
  HomeStateI,
  ViewTypeEnum,
  SortTypeEnum,
  MapDispatchToPropsI,
  TableDataI,
} from "./type";
import { getTempReportListAction, checkTempReportListAction } from "_actions/report";

import { Gutter } from "antd/lib/grid/row";
import { PaginationConfig, ColumnProps, TableEventListeners } from "antd/lib/table";
import LinkButton from "_components/LinkButton/LinkButton";
// import Notice from "./components/Notice";

import "./Home.less";
import { Redirect } from "react-router";

const DEFAULT_PAGE_SIZE = 12;

class Home extends Component<HomePropsI, HomeStateI> {
  constructor(props: HomePropsI) {
    super(props);

    this.state = {
      viewType: ViewTypeEnum.GRID,
      sortType: SortTypeEnum.TIME,
      isSelectable: false,
      page: 1,
      selections: [],
      redirectReport: false,
    };
  }

  componentDidMount(): void {
    const { tempReportList, getList } = this.props;
    getList && getList({ dtRange: [new Date(), new Date()], keyword: "" });
  }

  list = (): ReactElement | undefined => {
    const { selections, isSelectable, page } = this.state;
    const columns: ColumnProps<TableDataI>[] = [
      { title: "人员类别", dataIndex: "role" },
      {
        title: "姓名",
        dataIndex: "name",
        render: (text: string, record): ReactElement | string => {
          const { id } = record;
          return isSelectable ? (
            <>
              <Checkbox value={id} checked={selections.indexOf(id) > -1}></Checkbox>
              <span>{text}</span>
            </>
          ) : (
              text
            );
        },
      },
      { title: "工号", dataIndex: "emp_code" },
      { title: "所在部门", dataIndex: "department" },
      { title: "是否发热", dataIndex: "is_fever" },
      { title: "体温", dataIndex: "temperature" },
      { title: "是否离京", dataIndex: "foreign_flag" },
      { title: "从哪归来", dataIndex: "from_where" },
      { title: "上报日期", dataIndex: "created_at" },
    ];

    // const dataSource: TableDataI[] = [];
    const dataSource: TableDataI[] = this.props.tempReportList; 
    const renderList = this.getCurrentItem();

    const paginationConfig: PaginationConfig = {
      current: page,
      defaultPageSize: DEFAULT_PAGE_SIZE,
      total: renderList.length,
      hideOnSinglePage: true,
      onChange: (page): void => {
        this.setState({ page });
      },
    };

    return (
      <Table
        className="temp-report-list temp-report-list-table"
        rowKey={"id"}
        columns={columns}
        dataSource={dataSource}
        // dataSource={tempReportList}
        pagination={paginationConfig}
        onRow={(record): TableEventListeners => {
          return {
            onClick: (): void => {
              this.onClickItem(record.id);
            },
          };
        }}
      ></Table>
    );
  };

  tempReports = (): ReactElement | undefined => {
    const { page, isSelectable, selections } = this.state;
    const renderList = this.getCurrentItem();

    if (renderList && renderList.length) {
      const rows: ReactElement[] = [];
      let cols: ReactElement[] = [];
      const gutter: [Gutter, Gutter] = [
        { xs: 8, sm: 16, md: 24 },
        { xs: 20, sm: 30, md: 40 },
      ];

      let count = 0;

      renderList.forEach(item => {
        const { id, name, emp_code, role, is_fever, temperature, foreign_flag, from_where } = item;
        if (count >= 4) {
          count = 0;
          rows.push(<Row key={rows.length} type="flex" gutter={gutter} align="middle">
            {cols}</Row>);
          cols = [];
        }

        cols.push(<Col key={id} xs={24} md={12} lg={8} xl={6}></Col>);
      });

      rows.push(<Row key={rows.length} type="flex" gutter={gutter} align="top">{cols} </Row>);

      return (
        <div className="temp-report-list temp-report-list-square">
          {rows}
          <Pagination
            hideOnSinglePage={true}
            current={page}
            defaultPageSize={DEFAULT_PAGE_SIZE}
            total={renderList.length}
            onChange={(page): void => {
              this.setState({ page });
            }}
          ></Pagination>
        </div>
      );
    }
  };

  onClickItem = (id: string): void => {
    const { history, tempReportList } = this.props;
    const { isSelectable, selections } = this.state;

    if (isSelectable) {
      const nextSelections = selections.filter(item => item !== id);
      if (nextSelections.length === selections.length) {
        nextSelections.push(id);
      }
      this.setState({ selections: nextSelections });
    } else {
      const currentReport = tempReportList.find(item => item.id === id);
      if (currentReport) {
        const { id } = currentReport;
      }
    }
  };

  getCurrentItem = (): TempReportI[] => {
    const { tempReportList } = this.props;
    const { page } = this.state;
    return this.sortList(tempReportList).slice(
      (page - 1) * DEFAULT_PAGE_SIZE,
      page * DEFAULT_PAGE_SIZE,
    );
  };

  controller = (): ReactElement => {
    const { tempReportList } = this.props;
    const { isSelectable, viewType } = this.state;
    return (
      <div id="controller" className={`controller`}>
        <div className="controller-left">
          <span className="controller-title">报告列表</span>
          <LinkButton className="controller-upload" to="/temp-report" icon="cloud-upload">
            填报
          </LinkButton>
          <div className={`controller-del ${isSelectable ? "controller-del-open" : ""}`}>
            <Icon
              className="iconfont"
              type={isSelectable ? "arrow-left" : "delete"}
              onClick={(): void => this.setState({ isSelectable: !isSelectable, selections: [] })}
            />
            <span onClick={this.selectedAll}>全选</span>
            <span onClick={this.showConfirm}>审核</span>
          </div>
        </div>
        <div className={`controller-right ${tempReportList.length ? "" : "hidden"}`}>
          <Dropdown overlay={this.dropdownContent()} placement="bottomRight">
            <Icon className="controller-select-sort iconfont" type="sort-ascending" />
          </Dropdown>
          <Icon
            className="controller-select-view iconfont"
            type={viewType === ViewTypeEnum.GRID ? "menu" : "appstore"}
            onClick={this.changeViewType}
          />
        </div>
      </div>
    );
  };

  selectedAll = (): void => {
    const currentItems = this.getCurrentItem();
    this.setState({
      selections:
        currentItems.length === this.state.selections.length
          ? []
          : currentItems.map(item => item.id),
    });
  };

  changeViewType = (): void => {
    const nextType =
      this.state.viewType === ViewTypeEnum.GRID ? ViewTypeEnum.LIST : ViewTypeEnum.GRID;
    this.setState({ viewType: nextType });
  };

  showConfirm = (): void => {
    Modal.confirm({
      centered: true,
      className: "del-confirm",
      title: "确认审核",
      content: "确认审核所选报告吗？",
      cancelText: "取消",
      okText: "确定",
      onOk: async (): Promise<void> => {
        await this.checkTempReport();
        this.setState({
          isSelectable: false,
          selections: [],
        });
      },
      onCancel: (): void => {
        this.setState({
          isSelectable: false,
          selections: [],
        });
      },
    });
  };

  /**
   * 返回列表排序的内容部分
   *
   * @memberof Home
   */
  dropdownContent = (): ReactElement => {
    const { sortType } = this.state;
    return (
      <Menu
        className="home-temp-report-sort"
        onClick={(data): void => {
          this.setState({ sortType: data.key as SortTypeEnum });
        }}
      >
        <Menu.Item disabled={sortType === SortTypeEnum.TIME} key={SortTypeEnum.TIME}>
          时间排序
        </Menu.Item>
        <Menu.Item disabled={sortType === SortTypeEnum.TYPE} key={SortTypeEnum.TYPE}>
          人员类别排序
        </Menu.Item>
      </Menu>
    );
  };

  /**
   *
   * @memberof Home
   */
  onChecked = (): void => {
    const { tempReportList } = this.props;
    // if (!tempReportList.length) this.setState({ redirectReport: true });
  };

  /* === APIS 与服务器交互数据的方法 START === */

  /**
   * 审核所选报告
   *
   * @memberof Home
   */
  checkTempReport = async (): Promise<void> => {
    const { selections } = this.state;
    const { checkList } = this.props;
    console.log("check selected reports: ", selections);
    checkList(selections);
  };
  /* === APIS 与服务器交互数据的方法 END === */

  /**
   * 排序列表
   *
   * @memberof Home
   */
  sortList = (list: TempReportI[]): TempReportI[] => {
    const { sortType } = this.state;

    return list.sort((a, b) => {
      if (sortType === SortTypeEnum.TIME) {
        const createdAtA = a.created_at;
        const createdAtB = b.created_at;
        return createdAtA < createdAtB ? 1 : -1;
      }
      if (sortType === SortTypeEnum.TYPE) {
        const roleA = a.role;
        const roleB = b.role;
        return roleA < roleB ? -1 : 1;
      }

      return 0;
    });
  };

  render(): ReactElement {
    const { tempReportList, user } = this.props;
    const { viewType, redirectReport } = this.state;

    if (redirectReport) return <Redirect to="/temp-report" />;
    else
      return (
        <section className="home">
          {this.controller()}
          {tempReportList.length ? (
            viewType === ViewTypeEnum.GRID ? (
              this.tempReports()
            ) : (
                this.list()
              )
          ) : (<div className="home-empty"></div>)}
        </section>
      );
  }
}

const mapStateToProps = (state: StoreStateI): MapStateToPropsI => ({
  tempReportList: state.tempReportList,
  user: state.user,
});
const mapDispatchToProps: MapDispatchToPropsI = {
  getList: getTempReportListAction,
  checkList: checkTempReportListAction,
};
export default connect(mapStateToProps, mapDispatchToProps)(Home);
